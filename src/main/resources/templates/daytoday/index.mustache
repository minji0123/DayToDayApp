{{>layouts/header}}
<svg viewBox="0 0 0 0" style="position: absolute; z-index: -1; opacity: 0;">
    <defs>
        <linearGradient id="boxGradient" gradientUnits="userSpaceOnUse" x1="0" y1="0" x2="25" y2="25">
            <stop offset="0%"   stop-color="#27FDC7"/>
            <stop offset="100%" stop-color="#0FC0F5"/>
        </linearGradient>

        <linearGradient id="lineGradient">
            <stop offset="0%"    stop-color="#0FC0F5"/>
            <stop offset="100%"  stop-color="#27FDC7"/>
        </linearGradient>

        <path id="todo__line" stroke="url(#lineGradient)" d="M21 12.3h168v0.1z"></path>
        <path id="todo__box" stroke="url(#boxGradient)" d="M21 12.7v5c0 1.3-1 2.3-2.3 2.3H8.3C7 20 6 19 6 17.7V7.3C6 6 7 5 8.3 5h10.4C20 5 21 6 21 7.3v5.4"></path>
        <path id="todo__check" stroke="url(#boxGradient)" d="M10 13l2 2 5-5"></path>
        <circle id="todo__circle" cx="13.5" cy="12.5" r="10"></circle>
    </defs>
</svg>



<div class="todo-list">
    <h1>day To day</h1>
    <table>
        <tr>
        <td>Mon</td>
        <td>Tue</td>
        <td>Wed</td>
        <td>Thu</td>
        <td>Fri</td>
        <td>Sat</td>
        <td>Sun</td>
        </tr>
    </table>
    {{#daytodayList}}
    <div class="row">
        <div class="col-9">
        <label class="todo">
            <input class="todo__state" type="checkbox" id="{{id}}" value="{{completed}}" onclick="checkbox_Checked(this)"/>
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 200 25" class="todo__icon">
                <use xlink:href="#todo__line" class="todo__line"></use>
                <use xlink:href="#todo__box" class="todo__box"></use>
                <use xlink:href="#todo__check" class="todo__check"></use>
                <use xlink:href="#todo__circle" class="todo__circle"></use>
            </svg>
            <div class="todo__text">{{title}}</div>
        </label>
        </div>
        <span class="col-1 index-todo-btn material-icons-outlined edit-btn" data-bs-toggle="modal"   data-bs-target="#edit-modal"
              data-bs-id="{{id}}"
              data-bs-title="{{title}}">
            edit</span>

        <span class="col-1 index-todo-btn material-icons-outlined delete-btn" data-id="{{id}}">
            delete</span>

        <div class="col-1"></div>
        <hr />
    </div>
    {{/daytodayList}}

    {{>daytoday/_new}}
    <div style="margin-bottom: 5px;"></div>
</div>

<!-- Modal (댓글 수정)-->
<div class="modal fade" id="edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="todo-list">

                <div class="mb-3">
                    <label class="form-label">할일</label>
                    <input type="text" class="form-control" name="title" id="edit-modal-title">
                    <!-- name = DTO -->
                </div>

                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-outline-dark" id="edit-btn">확인</button>
                </div>

                {{#daytodayList}}
                    <input name="id" id="edit-modal-id" type="hidden"/>
                    <input class="todo__state" type="hidden" value="false" name="completed" id="edit-modal-completed"/>
                {{/daytodayList}}
                </form>
            </div>
        </div>
    </div>
</div>


<script>
{
    // 모달 창 변수화 (버튼 누르면 모달창 뜨게)
    const editModal = document.querySelector('#edit-modal');

    // 수정 버튼 클릭하면은
    editModal.addEventListener("shown.bs.modal", (event) => {
        // 트리거 버튼 변수화
        const triggerBtn = event.relatedTarget;

        // 원래 있던 할 일 불러오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const title = triggerBtn.getAttribute("data-bs-title");
        const completed = triggerBtn.getAttribute("data-bs-completed");

        // 불러온 할 일 반영시키기
        document.querySelector("#edit-modal-id").value = id;
        document.querySelector("#edit-modal-title").value = title;
        document.querySelector("#edit-modal-completed").value = completed;
    });
}


{
    // 수정 완료 버튼 변수화
    const editedBtn = document.querySelector("#edit-btn");

    // 수정 완료 버튼 클릭하면은
    editedBtn.addEventListener("click", () => {
        // 수정 할일 객체 생성
        const editDTD = {
            id : document.querySelector("#edit-modal-id").value,
            title : document.querySelector("#edit-modal-title").value,
            completed : document.querySelector("#edit-modal-completed").value
        };

        // fetch
        const url = "/daytoday/edit/"+ editDTD.id;
        fetch (url, {
            method: "PATCH",
            body:JSON.stringify(editDTD),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(response => {
            const msg = (response.ok)? "할 일이 수정되었습니다." : "할 일 수정 실패!";

            // 현재 페이지 새로고침
            window.location.reload();
        });
    });
}
</script>

{{>layouts/footer}}